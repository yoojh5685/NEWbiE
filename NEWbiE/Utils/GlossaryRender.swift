// Utils/GlossaryRender.swift
import SwiftUI
import Foundation

// MARK: - (ÏòµÏÖò) Ïö©Ïñ¥ Ï†ïÍ∑úÏãù Ìå®ÌÑ¥ Ïú†Ìã∏
/// ÎÇ¥Î∂Ä ÏÇ¨Ïö©: termÏùÑ Ï†ïÍ∑úÏãù Ìå®ÌÑ¥ÏúºÎ°ú (Í≥µÎ∞±ÏùÄ \s+ ÌóàÏö©)
/// ÌòÑÏû¨ Íµ¨ÌòÑÏóêÏÑúÎäî ÏßÅÏ†ë ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏßÄÎßå, Ï∂îÌõÑ Ï†ïÍµêÌïú Îß§Ïπ≠Ïóê ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
private func regexPattern(for term: String) -> String {
    let escaped = NSRegularExpression.escapedPattern(for: term)
    return escaped.replacingOccurrences(of: "\\ ", with: "\\s+")
}

// MARK: - By-Character Wrapping
/// Í∏∞Ï°¥ Î¨∏Ïûê ÏÜçÏÑ±(ÌäπÌûà Î∞ëÏ§Ñ)ÏùÑ Î≥¥Ï°¥Ìïú Ï±Ñ Í∞Å Í∏ÄÏûê Îí§Ïóê ZWSPÎ•º ÎÑ£ÎäîÎã§.
/// - ZWSPÏóêÎäî 'Î∞ëÏ§ÑÎßå' Î≥µÏÇ¨ÌïòÏó¨ Î∞ëÏ§ÑÏù¥ ÎÅäÍ≤® Î≥¥Ïù¥ÏßÄ ÏïäÍ≤å Ìï®(ÎßÅÌÅ¨Îäî Î≥µÏÇ¨ÌïòÏßÄ ÏïäÏùå).
private func attributedByCharWrapping(_ input: AttributedString) -> AttributedString {
    var out = AttributedString()
    var i = input.startIndex

    while i < input.endIndex {
        let next = input.index(i, offsetByCharacters: 1)
        let ch = input[i..<next]      // ÏõêÎ¨∏ 1Í∏ÄÏûê(ÏÜçÏÑ± Ìè¨Ìï®)

        // ÌòÑÏû¨ Í∏ÄÏûêÏóê Î∞ëÏ§ÑÏù¥ ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
        var hasUnderline = false
        for run in ch.runs {
            if run.underlineStyle != nil { hasUnderline = true; break }
        }

        // ÏõêÎ¨∏ Í∏ÄÏûê Ï∂îÍ∞Ä
        out += ch

        // ZWSP Ï∂îÍ∞Ä (+ Î∞ëÏ§ÑÎßå Î≥µÏÇ¨)
        var zwsp = AttributedString("\u{200B}")
        if hasUnderline {
            zwsp.underlineStyle = .single   // ‚Üê Î∞ëÏ§ÑÎßå Ï†ÅÏö©, ÎßÅÌÅ¨Îäî Ï†ÅÏö© X
        }
        out += zwsp

        i = next
    }
    return out
}

// MARK: - Attributed ÏÉùÏÑ±
/// fullTextÏóêÏÑú glossaryÏùò 'Ï≤´ Îì±Ïû•'Îßå Î∞ëÏ§Ñ + ÎßÅÌÅ¨(term://...) Î∂ÄÏó¨.
/// ÏÉâÏÉÅÏùÄ **Î≥∏Î¨∏ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ**(foregroundColor Î≥ÄÍ≤Ω ÏóÜÏùå).
///
/// - Parameters:
///   - fullText: ÏõêÎ¨∏ ÌÖçÏä§Ìä∏
///   - glossary: (term/definition) Î™©Î°ù
///   - debug: ÏΩòÏÜî ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏ Ï∂úÎ†• Ïó¨Î∂Ä
///   - applyByCharWrapping: ZWSPÎ°ú Í∏ÄÏûêÎã®ÏúÑ Ï§ÑÎ∞îÍøà Ï†ÅÏö© Ïó¨Î∂Ä
/// - Returns: (attr, matches) -> Î≥ÄÌôòÎêú AttributedStringÍ≥º Îß§Ïπ≠Îêú Ïö©Ïñ¥ Î¶¨Ïä§Ìä∏
func makeGlossaryAttributed(
    fullText: String,
    glossary: [GlossaryItem],
    debug: Bool = false,
    applyByCharWrapping: Bool = false
) -> (attr: AttributedString, matches: [GlossaryItem]) {

    var attributed = AttributedString(fullText)
    var matches: [GlossaryItem] = []

    // Í∞Å Ïö©Ïñ¥ÎßàÎã§ 'Ï≤´ Îì±Ïû•' ÏúÑÏπò Ï∞æÍ∏∞ (ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú)
    for g in glossary {
        let sanitizedTerm = normalizeForSearch(g.term) // NOTE: ÌîÑÎ°úÏ†ùÌä∏ ÎÇ¥Ïóê Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ìó¨Ìçº ÏÇ¨Ïö©
        if sanitizedTerm.isEmpty { continue }

        if let range = attributed.range(of: g.term, options: .caseInsensitive) {
            // Î∞ëÏ§Ñ + ÎßÅÌÅ¨Îßå Ï†ÅÏö© (ÏÉâÏÉÅÏùÄ Î≥∏Î¨∏ Ïú†ÏßÄ)
            attributed[range].underlineStyle = .single
            attributed[range].foregroundColor = .black
            attributed[range].link = URL(
                string: "term://\(g.term.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? g.term)"
            )
            matches.append(g)
        } else if debug {
            print("üîé [GlossaryRender] not found ‚Üí '\(g.term)'")
        }
    }

    // Í∏ÄÏûêÎã®ÏúÑ Ï§ÑÎ∞îÍøà Ï†ÅÏö© (full_article_summary Îì±ÏóêÏÑú ÌïÑÏöî)
    if applyByCharWrapping {
        attributed = attributedByCharWrapping(attributed)
        if debug { print("‚ÑπÔ∏è [GlossaryRender] applied byCharWrapping") }
    }

    if debug {
        print("üß™ [makeGlossaryAttributed] matches=\(matches.map { $0.term }) | applyByCharWrapping=\(applyByCharWrapping)")
    }

    return (attributed, matches)
}

// MARK: - View Wrapper
/// Î∞ëÏ§Ñ/ÎßÅÌÅ¨Í∞Ä Ï†ÅÏö©Îêú AttributedStringÏùÑ TextÎ°ú ÌëúÏãúÌïòÍ≥†,
/// term:// ÎßÅÌÅ¨ ÌÉ≠ÏùÑ ÏΩúÎ∞±(onTapTerm)ÏúºÎ°ú Ï†ÑÎã¨ÌïòÎäî Î∑∞.
struct GlossaryText: View {
    let attr: AttributedString
    let glossary: [GlossaryItem]
    let onTapTerm: (GlossaryItem) -> Void

    init(text: String,
         glossary: [GlossaryItem],
         debug: Bool = false,
         applyByCharWrapping: Bool = false,
         onTapTerm: @escaping (GlossaryItem) -> Void)
    {
        self.glossary = glossary
        self.onTapTerm = onTapTerm
        let made = makeGlossaryAttributed(
            fullText: text,
            glossary: glossary,
            debug: debug,
            applyByCharWrapping: applyByCharWrapping
        )
        self.attr = made.attr
    }

    var body: some View {
        Text(attr)
            .environment(\.openURL, OpenURLAction { url in
                // term://<encoded-term> ÌÅ¥Î¶≠ ‚Üí Ìï¥Îãπ GlossaryItem Ï∞æÏïÑ ÏΩúÎ∞±
                guard url.scheme == "term" else { return .systemAction }
                let raw = url.host ?? url.path.trimmingCharacters(in: CharacterSet(charactersIn: "/"))
                let key = raw.removingPercentEncoding ?? raw
                let sanitizedKey = normalizeForSearch(key)

                if let g = glossary.first(where: {
                    normalizeForSearch($0.term).caseInsensitiveCompare(sanitizedKey) == .orderedSame
                }) {
                    onTapTerm(g)
                    return .handled
                }
                return .discarded
            })
    }
}
